import time
from datetime import datetime, timedelta
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import pandas as pd
from joblib import Parallel, delayed
from pathlib import Path
from tqdm import tqdm
import sys
from database.models import Base
from data.loaders import load_restaurant_data
from features.engineering import create_features
from models.train import train_model
from models.predict import generate_features_for_date
from config import DB_PATH, DATA_DIR
from tabulate import tabulate
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="xgboost")


class ConsoleUI:
    @staticmethod
    def print_header():
        print("\nüîÆ Sushi Sales Forecast Tool")
        print("=" * 40)

    @staticmethod
    def progress(iterable, desc="Processing"):
        return tqdm(iterable, desc=desc.ljust(25), bar_format="{l_bar}{bar:40}{r_bar}", file=sys.stdout)

    @staticmethod
    def print_success(msg):
        print(f"‚úÖ {msg}")

    @staticmethod
    def print_error(msg):
        print(f"‚ùå {msg}", file=sys.stderr)

    @staticmethod
    def print_warning(msg):
        print(f"‚ö†Ô∏è  {msg}")


def save_report(df, filename="forecast_report"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –≤ CSV –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    report_dir = Path("reports")
    report_dir.mkdir(exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    csv_path = report_dir / f"{filename}_{timestamp}.csv"
    txt_path = report_dir / f"{filename}_{timestamp}.txt"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    df.to_csv(csv_path, index=False)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    report = [
        f"–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—É: {df['date'].max()}",
        "\n–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂:",
        tabulate(
            df[['restaurant', 'dish', 'prediction']],
            headers=['–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ë–ª—é–¥–æ', '–ü—Ä–æ–≥–Ω–æ–∑, —à—Ç'],
            tablefmt='grid',
            numalign="center"
        )
    ]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    with open(txt_path, 'w') as f:
        f.write("\n".join(report))

    return csv_path, txt_path


def process_restaurant(db_path, file_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    try:
        engine = create_engine(f"sqlite:///{db_path}")
        Session = sessionmaker(bind=engine)
        with Session() as session:
            # –ò–º—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ = –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            restaurant_name = file_path.stem
            load_restaurant_data(session, file_path, restaurant_name)
        return True, restaurant_name
    except Exception as e:
        return False, f"{file_path.stem}: {str(e)}"


def main():
    ConsoleUI.print_header()
    start_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    report_files = list(DATA_DIR.glob("*.xlsx"))
    if not report_files:
        ConsoleUI.print_error("–ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç—ã –≤ –ø–∞–ø–∫—É input_data.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    engine = create_engine(f"sqlite:///{DB_PATH}")
    Base.metadata.create_all(engine)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    Session = sessionmaker(bind=engine)
    session = Session()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    ConsoleUI.print_success(f"–ù–∞–π–¥–µ–Ω–æ {len(report_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    results = []
    for file_path in ConsoleUI.progress(report_files, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤"):
        result = process_restaurant(DB_PATH, file_path)
        results.append(result)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    errors = [msg for status, msg in results if not status]
    if errors:
        ConsoleUI.print_error("–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:")
        for error in errors:
            print(f"  - {error}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    ConsoleUI.print_success("–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    with ConsoleUI.progress([], "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"):
        df = pd.read_sql(
            "SELECT s.date, d.name AS dish, s.amount, r.name AS restaurant "
            "FROM sales s "
            "JOIN dishes d ON s.dish_id = d.id "
            "JOIN restaurants r ON s.restaurant_id = r.id",
            session.bind,
            parse_dates=['date']
        )
        df['date'] = pd.to_datetime(df['date']).dt.normalize()


    # –ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    with ConsoleUI.progress([], "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
        model_data = create_features(df)

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    ConsoleUI.print_success("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    with ConsoleUI.progress(range(100), "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤") as pbar:
        features = ['day_of_week', 'month', 'is_weekend', 'is_holiday',
                    'lag_1', 'lag_2', 'lag_3', 'lag_7', 'rolling_7_mean']
        model = train_model(model_data[features], model_data['amount'])
        pbar.update(100)

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    ConsoleUI.print_success("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
    tomorrow = datetime.now() + timedelta(days=1)
    predictions = []

    with ConsoleUI.progress(report_files, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤") as pbar:
        for file_path in pbar:
            restaurant_name = file_path.stem
            features_df = generate_features_for_date(tomorrow, session, restaurant_name)
            if not features_df.empty:
                preds = model.predict(features_df[features])
                features_df['prediction'] = preds.round().astype(int)
                predictions.append(features_df)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
    if predictions:
        full_predictions = pd.concat(predictions)
        csv_path, txt_path = save_report(full_predictions)

        ConsoleUI.print_success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  - –ú–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á—ë—Ç: {csv_path}")
        print(f"  - –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç: {txt_path}")
    else:
        ConsoleUI.print_warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = time.time() - start_time
    ConsoleUI.print_success(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
    session.close()


if __name__ == "__main__":
    main()